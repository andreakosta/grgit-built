= grgit-authentication
:jbake-title: grgit-authentication
:jbake-type: page
:jbake-status: published

== Description

Grgit supports authentication via basic auth (i.e. username/password or _hardcoded_ creds) and SSH keys. It also integrates support for using SSH agents (e.g. ssh-agent or Pageant) to provide authentication.

== Options

=== Authentication Method

The following system properties can be set to configure which authentication options are available when performing a _transport_ command. Generally, you shouldn't need to modify any of these unless you are having an issue and need to bypass or force or particular method.

org.ajoberstar.grgit.auth.force:: (one of `hardcoded`, `interactive`, `sshagent`, `pageant`)
org.ajoberstar.grgit.auth.hardcoded.allow:: (`true` or `false`, default `true`)
org.ajoberstar.grgit.auth.interactive.allow:: (`true` or `false`, default `true`)
org.ajoberstar.grgit.auth.sshagent.allow:: (`true` or `false`, default `true`)
org.ajoberstar.grgit.auth.pageant.allow:: (`true` or `false`, default `true`)

When credentials/input are needed, they will be selected in the following precedence, if available:

. Hardcoded (i.e. username/password) credentials, if provided.
. Interactive credentials provided via a dialog prompt. This is only available in non-headless JVMs, and will only display if the input couldn't be retrieved in another manner.

For SSH URLs, a key may be used from one of the following sources:

. SSH key in a default location (e.g. `~/.ssh/id_rsa`)
. SSH key from a user-specified location
. Keys loaded into a running ssh-agent
. Keys loaded into a running Pageant

=== Hardcoded Credentials

These are presented in precedence order (direct parameter in code, system properties, environment variables).

==== Parameter to Grgit operations

Some Grgit operations, such as link:grgit-clone.html[grgit-clone] allow you to provide credentials programmatically.

[source, groovy]
----
import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.Credentials

def grgit = Grgit.clone(dir: '...', url: '...', credentials: new Credentials(username, password))
----

==== System Properties

org.ajoberstar.grgit.auth.username:: Username to provide when basic authentication credentials are needed. Username can be specified without a password (e.g. using a GitHub auth token as the user and providing no password).
org.ajoberstar.grgit.auth.password:: Password to provide when basic authentication credentials are needed.

==== Environment Variables

GRGIT_USER:: Username to provide when basic authentication credentials are needed. Username can be specified without a password (e.g. using a GitHub auth token as the user and providing no password).
GRGIT_PASS:: Password to provide when basic authentication credentials are needed.

=== SSH Credentials

Generally, these will be detected for you, whether they're in a default location or provided from an agent. If you want to specify a specific SSH key (and passphrase), you can do so via system properties.

org.ajoberstar.grgit.auth.ssh.private:: Path to the SSH key to use
org.ajoberstar.grgit.auth.ssh.passphrase:: Passphrase to use the key, if any needed

== Customizing the JSch Session

JGit uses JSch for it's SSH layer. To customize this from it's defaults, you can use the following system properties (see available keys/values in link:https://epaul.github.io/jsch-documentation/javadoc/com/jcraft/jsch/JSch.html#setConfig-java.util.Hashtable-[JSch's docs]):

org.ajoberstar.grgit.auth.session.config.<key>:: <value>

For example: `org.ajoberstar.grgit.auth.session.config.StrictHostKeyChecking=no`

== Examples

This is a non-exhaustive list of examples of how to configure authentication in common scenarios.

=== Using a GitHub auth token with HTTPS URLs

Set the environment variable `GRGIT_USER` to your authentication token from GitHub.

=== Using a Username and Password with HTTPS URLs

Set the system properties:

----
groovy -Dorg.ajoberstar.grgit.auth.username=someone -Dorg.ajoberstar.grgit.auth.password=mysecretpassword myscript.groovy
----

=== Using a specific SSH key

Set the system properties:

----
groovy -Dorg.ajoberstar.grgit.auth.ssh.private=/my/secret/key -Dorg.ajoberstar.grgit.auth.ssh.passphrase=mysecretpassword myscript.groovy
----

=== Using ssh-agent

Make sure your ssh-agent is started and your key is loaded. Then just run your application or script.

=== Using Pageant

Make sure your Pageant is started and your key is loaded. Then just run your application or script.
